import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,o as n}from"./app-C-UrHOVr.js";const l="/assets/1.1-D1aRR1_F.png",t="/assets/1.2-C5j70mbO.png",p={};function h(k,s){return n(),a("div",null,s[0]||(s[0]=[e('<h1 id="自动扩缩容hpa原理及adapter配置详解" tabindex="-1"><a class="header-anchor" href="#自动扩缩容hpa原理及adapter配置详解"><span>自动扩缩容HPA原理及adapter配置详解</span></a></h1><h2 id="自动扩缩容架构图" tabindex="-1"><a class="header-anchor" href="#自动扩缩容架构图"><span>自动扩缩容架构图</span></a></h2><p>[<img src="'+l+'" alt="image.png" loading="lazy">]</p><p>我们先来看一下自动扩缩容的原理，在k8s中HPA这个模块的逻辑会定时请求api server 获取相应的pod或者CRD或者其他资源的指标信息，这些指标信息是用户创建HPA的yaml配置文件时指定的。</p><p>api server收到请求后，根据请求的api group，api version 转发给内部的api service服务进行处理，当我们想让k8s借用prometheus的相关指标进行扩缩容时，就需要在集群里用api service的方式安装prometheus adapter，它会将发往api server的请求经过包装，转发到prometheus服务器获取对应指标信息，然后将结果经过封装返回给客户端即HPA模块。HPA模块收到指标后，在根据自身配置文件中的target值判断是否需要进行自动扩缩容。</p><h3 id="api-server-处理请求的方式" tabindex="-1"><a class="header-anchor" href="#api-server-处理请求的方式"><span>api server 处理请求的方式</span></a></h3><p>既然提到了prometheus adapter是以api service 方式安装到k8s集群中的，我再对api server的架构已经处理请求的方式再阐述下。</p><p>api server 处理请求的方式是链式的，你可以简单的理解为api server里有多个http server ，当某个请求的路径不属于某个http server处理范畴内的话，会将这个请求委托给下一个http server进行处理。同时，k8s允许用户自定义api service作为http server，prometheus adapter 就是一个自定义的api service。</p><h4 id="api-server-请求路径格式" tabindex="-1"><a class="header-anchor" href="#api-server-请求路径格式"><span>api server 请求路径格式</span></a></h4><p>向api server发送http请求，请求格式是按一定规则进行组装的，我主要查看了HPA模块源码，所以拿这块去举例，hpa发往api server的请求是将api version和api group 以及要请求资源的命名空间，资源名拼接到一起组成的路径。如下:</p><p>[<img src="'+t+`" alt="image.png" loading="lazy">]</p><p>不同的HPA指标类型这个路径的拼接会有所不同(下面会详细讲到)，但是整体的api风格是和这个一致的。</p><p>当HPA在向api server发送请求的时候则是根据不同的扩缩容指标类型选择了不同的api group 去发送请求。</p><blockquote><p>❗️❗️📢 注意，这里HPA选择的api group是k8s这部分代码已经固定好了的，所以prometheus adapter在以api service安装时指定的api group 需要和这里吻合。目前针对指标类型，<a href="http://xn--HPAmetrics-j93pp2a.k8s.io" target="_blank" rel="noopener noreferrer">HPA会从metrics.k8s.io</a>, <a href="http://customer.metrics.k8s.io" target="_blank" rel="noopener noreferrer">customer.metrics.k8s.io</a>, external.metrics.k8s.io这3个api group种选取对应的group。</p></blockquote><h2 id="hpa-扩缩容的4种指标类型" tabindex="-1"><a class="header-anchor" href="#hpa-扩缩容的4种指标类型"><span>HPA 扩缩容的4种指标类型</span></a></h2><p>接下来，我们来详细看下，HPA扩缩容的4种指标类型。</p><h3 id="pods" tabindex="-1"><a class="header-anchor" href="#pods"><span>Pods</span></a></h3><p>先看第一种pods类型，它表示的是由pod产生的指标， 其在HPA声明的配置yaml文件里写法如下，</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">autoscaling/v2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HorizontalPodAutoscaler</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sample-app</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">default</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    maxReplicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    minReplicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    metrics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">           metric</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http_requests</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                matchLabels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                  &lt;label-key&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;label-value&gt;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">           target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              averageValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">500m</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">AverageValue</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Pods</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scaleTargetRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sample-app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到spec.metrics.type 值为pods类型，HPA的pods 指标类型 是指pod这个资源对象产生的指标，其中定义了指标名为http_requests，最终发往api server的url path如下所示，</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/http_requests?labelSelector</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;label-key&gt;=&lt;label-value&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>api server 收到这个请求后会将请求转发给prometheus adapter，那么prometheus adapter 又是如何将http_requests 与具体的prometheus中的指标对应起来的呢？</p><p>prometheus adapter在启动的时候我们会配置一个规则配置文件，在这个文件定义了这个映射关系，下面是这针这种类型的指标配置规则部分，</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">seriesQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http_requests_total{}&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    overrides</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      kubernetes_namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;namespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      kubernetes_pod_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pods&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http_requests_total&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http_requests&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  metricsQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;sum(rate(&lt;&lt;.Series&gt;&gt;{&lt;&lt;.LabelMatchers&gt;&gt;}[2m])) by (&lt;&lt;.GroupBy&gt;&gt;)&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将hpa配置文件和发往api server的请求以及prometheus adapter的规则文件结合起来，看看prometheus adapter 规则文件里那些模板变量的含义。</p><p>首先是hpa的配置文件中指定了metric.name是http_requests，http_requests在prometheus adapter的配置文件里是将prometheus的http_requests_total与之对应了起来，并且从规则配置文件的resources.overrides 配置中可以发现namespace和pods资源在指标http_requests_total中会有kubernetes_namespace和kubernetes_pod_name标签与之对应，这层关系其实主要是为了metricsQuery 中模板变量的替换。</p><p>metricsQuery 中 <strong>&lt;&lt;.Series&gt;&gt;</strong> 其实就是seriesQuery这部分。</p><p><strong>&lt;&lt;.LabelMatchers&gt;&gt;</strong> 是筛选指标时的标签，在hpa里面我们指定了metric.selector，发往api server的请求里的参数labelSelector就会替代&lt;&lt;.LabelMatchers&gt;&gt;模板变量，同时发往api server请求中的namespace的值也会写到&lt;&lt;.LabelMatchers&gt;&gt;中，并且namespace的对应标签名就是resources.overrides中定义的kubernetes_namespace。</p><p><strong>&lt;&lt;.GroupBy&gt;&gt;</strong> 变量在这里会将k8s的resource资源类型作为分组的维度，并且在这个场景下，在发往api server的请求中，k8s的资源是pods类型，而pods类型在指标中的标签名是kubernetes_pod_name。</p><p>所以最终，在prometheus 中进行查询时执行的promql语句为,</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum(rate(http_requests_total</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubernetes_namespace</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;:&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;,&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;label-key&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;label-value&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;}[2m])) by (kubernetes_pod_name)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>Object</span></a></h3><p>在看了pods类型的hpa指标后，我们再来看看Object类型的指标是如何配置的，因为在k8s里资源类型除了pod类型，还有其他类型，所以如果由其他资源类型产生的指标，则由Object来表示。</p><p>先看下hpa的yaml配置文件是如何写的。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">autoscaling/v2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HorizontalPodAutoscaler</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sample-app</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">default</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    maxReplicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    minReplicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    metrics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        metric</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">requests-per-second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        describedObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">extensions/v1beta1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Ingress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">main-route</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">2k</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scaleTargetRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sample-app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发往api server的请求格式如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/ingress/main-route/requests-per-second</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>prometheus adapter配置此类规则和Pods类型类似，模板变量解析方式也是类似，唯一有点不一样的是此时的&lt;&lt;.GroupBy&gt;&gt; 模板变量会被ingress/main-route 也就是资源名加上资源示例名替代。</p><h3 id="resource-containerresource" tabindex="-1"><a class="header-anchor" href="#resource-containerresource"><span>Resource, ContainerResource</span></a></h3><p>接着看一下hpa中的Resource类型的指标配置，它表示对pod的cpu或者内存值来进行扩缩容，本质上可以用Pods 类型的配置来代替这部分配置，那为什么还有Resource类型呢？因为Resource出来的时候还没有Pods 类型。</p><p>Kubernetes 1.20 在 HorizontalPodAutoscaler (HPA) 中引入了 <code>ContainerResource</code> 类型指标，不论是Resource还是ContainerResource都只能对cpu和内存这两个维度进行监控，它们的区别如下，</p><p>Resource 计算pod的资源使用率是</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{每个容器的资源使用量}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sum{每个容器的资源请求}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是一个pod有多个容器，可能会出现单个容器资源使用率高，但是平均下来每个容器资源使用率低的情况，而ContainerResource 则能够指定以pod中的哪个容器拿来计算扩容指标，能够提供更准确的扩容机制。</p><p>ContainerResource在hpa的yaml配置文件中配置如下,其中container标签指明了容器名称。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ContainerResource</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">containerResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cpu</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">application</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Utilization</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    averageUtilization</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而Resource类型的扩容指标则是针对pod中所有容器计算指标，</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Resource</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cpu</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Utilization</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    averageUtilization</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们发往api server 的请求格式如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/apis/metrics.k8s.io/v1beta1/namespaces/default/pods</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注意，这里的配置文件没有加上selector，实际上我们平时写配置文件的时候肯定是有selector的，所以发往api server的请求也会有selector的参数</p></blockquote><p>prometheus adapter 在收到这个请求后，会将对应的pod的cpu和内存信息全部返回，然后k8s的hpa模块筛选其需要用到的部分，像ContainerResource就会筛选返回结果中和container标签值代表的容器名称一样的指标进行计算。</p><p>prometheus adapter针对此类型的指标规则配置如下， 其中的containerLabel 表明了指标中容器名称是用哪个标签表示的，此时的&lt;&lt;.GroupBy&gt;&gt;模板变量 会由pod资源名称和容器名标签两个维度替代。</p><blockquote><p>以下是prometheus adapter官方给出的配置模版，自己配置的时候需要改掉实际查询的指标名已经标签名等。</p></blockquote><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;resourceRules&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;cpu&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;containerLabel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;container&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;containerQuery&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      sum by (&lt;&lt;.GroupBy&gt;&gt;) (  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        irate (  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            container_cpu_usage_seconds_total{&lt;&lt;.LabelMatchers&gt;&gt;,container!=&quot;&quot;,pod!=&quot;&quot;}[4m]  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        )  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      )  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;nodeQuery&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      sum by (&lt;&lt;.GroupBy&gt;&gt;) (  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        irate(  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            node_cpu_usage_seconds_total{&lt;&lt;.LabelMatchers&gt;&gt;}[4m]  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        )  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      )  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;resources&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;overrides&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;namespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;resource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;namespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;resource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;pod&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;resource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pod&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;memory&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;containerLabel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;container&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;containerQuery&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      sum by (&lt;&lt;.GroupBy&gt;&gt;) (  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        container_memory_working_set_bytes{&lt;&lt;.LabelMatchers&gt;&gt;,container!=&quot;&quot;,pod!=&quot;&quot;}  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      )  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;nodeQuery&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      sum by (&lt;&lt;.GroupBy&gt;&gt;) (  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        node_memory_working_set_bytes{&lt;&lt;.LabelMatchers&gt;&gt;}  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      )  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;resources&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;overrides&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;resource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;namespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;resource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;namespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;pod&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &quot;resource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pod&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;window&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5m&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="external" tabindex="-1"><a class="header-anchor" href="#external"><span>External</span></a></h3><p>最后，我们来看下external 类型的扩容指标如何配置，上面讲到的hpa 扩缩容指标类型都是在k8s集群里产生的指标，它们都限定在了一个namespace里面，除此以外，hpa模块还允许配置第三方的指标类型，比如集群外部的消息队列产生的指标，这类型的指标被称作External类型。 在hpa里配置案例如下，</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">External</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">external</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    metric</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">queue_messages_cnt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            matchLabels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lanpangzi&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # External指标类型下只支持Value和AverageValue类型的目标值  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">AverageValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        averageValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发往api server的请求格式如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/apis/external.metrics.k8s.io/v1beta1/namespaces/default/queue_messages_cnt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于外部指标和namespace无关，所以在配置prometheus adapter的规则配置文件的时候，指定下指标是namespace无关的。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">externalRules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">seriesQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;queue_messages_cnt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    namespaced</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;queue_messages_cnt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;queue_messages_cnt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metricsQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">avg(&lt;&lt;.Series&gt;&gt;{&lt;&lt;.LabelMatchers&gt;&gt;})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>探索HPA配置的含义过程中，其实可以发现k8s在针对HPA扩容依据的拓展方式上，就是规定了3组api group(<a href="http://metrics.k8s.io" target="_blank" rel="noopener noreferrer">metrics.k8s.io</a>,<a href="http://external.metrics.k8s.io" target="_blank" rel="noopener noreferrer">external.metrics.k8s.io</a>,<a href="http://custom.metrics.k8s.io" target="_blank" rel="noopener noreferrer">custom.metrics.k8s.io</a>)，并且用基本一致的http请求，让第三方(prometheus adapter)在声明为api service 的时候指定为对应的api group，然后解析请求路径和参数来进而对prometheus查询 即完成了对HPA扩容指标的查询。</p><p>关于prometheus adapter更多的配置案例建议直接看prometheus adapter的doc目录下的示例。</p>`,65)]))}const c=i(p,[["render",h]]),g=JSON.parse('{"path":"/docs/K8S/1.html","title":"自动扩缩容HPA原理及adapter配置详解","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-05-07T00:00:00.000Z","category":["K8S"],"description":"自动扩缩容HPA原理及adapter配置详解 自动扩缩容架构图 [image.png] 我们先来看一下自动扩缩容的原理，在k8s中HPA这个模块的逻辑会定时请求api server 获取相应的pod或者CRD或者其他资源的指标信息，这些指标信息是用户创建HPA的yaml配置文件时指定的。 api server收到请求后，根据请求的api group，a...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自动扩缩容HPA原理及adapter配置详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-21T09:32:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ryan Su\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/docs/K8S/1.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"自动扩缩容HPA原理及adapter配置详解"}],["meta",{"property":"og:description","content":"自动扩缩容HPA原理及adapter配置详解 自动扩缩容架构图 [image.png] 我们先来看一下自动扩缩容的原理，在k8s中HPA这个模块的逻辑会定时请求api server 获取相应的pod或者CRD或者其他资源的指标信息，这些指标信息是用户创建HPA的yaml配置文件时指定的。 api server收到请求后，根据请求的api group，a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-21T09:32:13.000Z"}],["meta",{"property":"article:published_time","content":"2023-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-21T09:32:13.000Z"}]]},"git":{"createdTime":1761039133000,"updatedTime":1761039133000,"contributors":[{"name":"ryanchosen","username":"ryanchosen","email":"syhchosen@google.com","commits":1,"url":"https://github.com/ryanchosen"}]},"readingTime":{"minutes":8.24,"words":2473},"filePathRelative":"docs/K8S/1.md","excerpt":"\\n<h2>自动扩缩容架构图</h2>\\n<p>[]</p>\\n<p>我们先来看一下自动扩缩容的原理，在k8s中HPA这个模块的逻辑会定时请求api server 获取相应的pod或者CRD或者其他资源的指标信息，这些指标信息是用户创建HPA的yaml配置文件时指定的。</p>\\n<p>api server收到请求后，根据请求的api group，api version 转发给内部的api service服务进行处理，当我们想让k8s借用prometheus的相关指标进行扩缩容时，就需要在集群里用api service的方式安装prometheus adapter，它会将发往api server的请求经过包装，转发到prometheus服务器获取对应指标信息，然后将结果经过封装返回给客户端即HPA模块。HPA模块收到指标后，在根据自身配置文件中的target值判断是否需要进行自动扩缩容。</p>","autoDesc":true}');export{c as comp,g as data};
